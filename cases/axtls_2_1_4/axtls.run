#!/usr/bin/env python2.7

"""
"""
import argparse
import os.path
import subprocess as sp
import hashlib
import json

CLEANUP = False

def vcmd(cmd, inp=None, shell=True):
    proc = sp.Popen(cmd,shell=shell,stdin=sp.PIPE,stdout=sp.PIPE,stderr=sp.PIPE)
    rs =  proc.communicate(input=inp)
    exit_code = proc.wait()
    return rs, exit_code

def runcmd(cmd):
    try:
        #print '$', cmd
        (_,rs_err), exit_code = vcmd(cmd)
        assert not rs_err, rs_err
        #print 'ecode', exit_code
        return exit_code
    except:
        #print("cmd '{}' failed".format(cmd))
        return -1

def phash(v):
    import sys
    return hash(v) % ((sys.maxsize + 1) * 2)
    
def printHashCodes(jsonFile, outFile, filter=True):
    jsonFile = open(jsonFile, 'r')
    values = json.load(jsonFile)
    jsonFile.close()
    fields_to_hash = {'bug_type', 'file', 'line'}
    hashCodes = ['allreachable']
    for bug in values:
        fields2hash={}
        for field in fields_to_hash:
            fields2hash[field] = bug[field]
        hashCodes.append(hashlib.md5(str(fields2hash).encode()).hexdigest())

    f = open(outFile, "a")
    f.write('\n'.join(hashCodes))
    f.close()

def sameConfig(tdir, f1, f2):
    tf1 = "{}/f1.txt".format(tdir)
    tf2 = "{}/f2.txt".format(tdir)

    assert runcmd("rm -rf {} {}".format(tf1, tf2)) == 0

    cleansort = lambda f, tf: "cat {} | sort | egrep \"^(CONFIG_|# CONFIG_.*is not set)\" > {}".format(f, tf)
    assert runcmd(cleansort(f1, tf1))  == 0
    assert runcmd(cleansort(f2, tf2))  == 0
    return runcmd("diff {} {}".format(tf1, tf2)) == 0
    
                 
if __name__ == "__main__":
    #note:  use abspath (considers symlinks) instead of realpath (ignore symlinks)
    me_file = os.path.abspath(os.path.expanduser(__file__))  
    me_dir = os.path.dirname(me_file)

    parser = argparse.ArgumentParser()
    parser.add_argument("inputs", help="input configurations")
    args = parser.parse_args()
    inp = args.inputs.strip() #"x 0, y 1, z 0"

    import time
    tid = "{}.{}".format(time.time(), phash(inp))


    HOME_DIR="/home/ugur"
    TMP_DIR = "/var/tmp"
    KCONFIG_DIR="{}/kconfig".format(HOME_DIR)

    saCMD='{}/infer/bin/infer run --keep-going -- make PREFIXb=/tmp/local'.format(HOME_DIR)

    progName="axtls_2_1_4"
    tarFile = "axTLS-2.1.4.tar.gz"
    exratedFile = "axtls-code"

    BENCH_DIR="{}/cases/{}".format(KCONFIG_DIR, progName)
    VANILLA_DIR = "{}/{}".format(BENCH_DIR, exratedFile)
    SRC_DIR =  "{}/{}-{}".format(TMP_DIR, progName, tid)
    OUTPUT_DIR= "{}/igen_out".format(TMP_DIR)
    
    defConfigFile = "{}/def.config".format(BENCH_DIR)
    configFile = "{}/config/.config".format(SRC_DIR)
    configFileBackup = "{}/backup.config".format(SRC_DIR)
    jsonFile = "{}/infer-out/report.json".format(SRC_DIR)
    resultFile = "{}/{}_{}_interesting.txt".format(OUTPUT_DIR, progName, tid)

    assert os.path.isdir(VANILLA_DIR), VANILLA_DIR
    assert not os.path.isdir(SRC_DIR), SRC_DIR

    cmd="cp -r {} {}".format(VANILLA_DIR, SRC_DIR)
    assert runcmd(cmd) == 0

    cmd="cp {} {}".format(defConfigFile, configFile)
    assert runcmd(cmd) == 0

    parts =  [p.split() for p in inp.split(" , ")]
    ys, ns = [], []
    neithers = {}
    for name, val in parts:
        if val == 'y':
            ys.append(name)
        elif val == 'n':
            ns.append(name)
        else:
            neithers[name] = val

    setcmd = lambda name: "sed -e 's/.*{} .*/{}=y/' -i {}".format(name, name, configFile)
    unsetcmd = lambda name: "sed -e 's/.*{}=y.*/# {} is not set/' -i {}".format(name, name, configFile)
    setNonBool = lambda name, value: "sed -e 's/.*{}.*/{}={}/' -i {}".format(name, name, value, configFile)

    for name in ys:
        runcmd(setcmd(name))
        
    for name in ns:
        runcmd(unsetcmd(name))
        
    for name, value in neithers.iteritems():
        runcmd(setNonBool(name, value))
    
    assert runcmd("cp {} {}".format(configFile, configFileBackup)) == 0

    #runtest
    logFile = "{}/{}_{}_build.log".format(OUTPUT_DIR, progName, tid)
    outF = open(logFile, "w+")
    outF.write("---Configuration:{}, stime+hash:{}\n".format(inp, tid))    
    outF.close()

    found = True
    cmd = "cd {} && make oldconfig >> {} 2>&1".format(SRC_DIR, logFile);
    if runcmd(cmd) != 0:
        found = False
    else:
        runcmd("echo 'make oldconfig succes' >> {} 2>&1".format(logFile))

    if found and not sameConfig(SRC_DIR, configFile, configFileBackup):
        found = False
    else:
        runcmd("echo 'SameConfig succes' >> {} 2>&1".format(logFile))
    
    cmd = "cd {} && {} >> {} 2>&1".format(SRC_DIR, saCMD, logFile);
    if found and runcmd(cmd) != 0:
        found = False
    else:
        runcmd("echo 'Analysis succes' >> {} 2>&1".format(logFile))
    
    if found:
        printHashCodes(jsonFile, resultFile)
    else:
        runcmd("echo 'allreachable' > {}".format(resultFile))

    if CLEANUP:
        runcmd("rm -rf {}".format(SRC_DIR))
        if found:
            runcmd("rm -rf {}".format(logFile))

    print resultFile